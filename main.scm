(use-modules
 (chickadee)
 (chickadee scripting)
 (chickadee math vector)
 (chickadee graphics sprite)
 (chickadee graphics texture)
 (chickadee graphics font)
 (chickadee graphics blend)
 (system repl coop-server)
 (srfi srfi-18))
(define title? #t)
(define player-sprite #f)
(define ball-sprite #f)
(define speed 2.0)
(define x 0.0)
(define y 0.0)
(define s-x 0.0)
(define s-y '(0.0))
(define (enque x) (set! s-y (append x s-y)))
(define (deque) (set! s-y (reverse (cdr (reverse s-y)))))
(define repl (spawn-coop-repl-server))
(define (load) (set! player-sprite (load-image "up2.png")) (set! ball-sprite (load-image "profile_image.png")))
;; (define (fib x) (letrec ((fib-iter (lambda (n f1 f2) (if (< n 1) f1 (fib-iter (- n 1) f2 (+ f1 f2)))))) (fib-iter x 0 1)))
(define (draw alpha)
  (if title?
      (draw-text "Shooter! GAME.\n Gamer!\nstart" (vec2 (/ 480 3) (/ 480 1.5)) #:scale (vec2 2.0 2.0))
      (begin
	(draw-sprite player-sprite (vec2 x y) #:blend-mode blend:alpha)
	(map (lambda (x) (draw-sprite ball-sprite (vec2 s-x x) #:blend-mode blend:alpha)) s-y)
	)
      ))
(define (update dt) (update-agenda 1)
  (poll-coop-repl-server repl)
  (set! s-y (map (lambda (x) (+ x 20.0)) s-y))
  (if (pair? s-y) (if (< (window-height (current-window)) (car (reverse s-y))) (deque) #f) #f)
  (if (not title?)
      (cond
;;       ((key-pressed? 'space) ())
       ((key-pressed? 'right) (set! x (+ x speed)))
       ((key-pressed? 'left) (set! x (- x speed)))
       ((key-pressed? 'up) (set! y (+ y speed)))
       ((key-pressed? 'down) (set! y (- y speed)))
       ((key-pressed? 'q) (abort-game)))
      
      (if (key-pressed? 'space)
	  (if title?
	      (set! title? #f)
	      #f)
	  #f)))
(define (key-press key modify repeat) (if (key-pressed? 'space) (begin (set! s-x x) (enque (list y))) #f) (display key) (display s-y) (newline))
(run-game #:window-title "shooting!" #:load load #:draw draw #:update update #:update-hz 60 #:key-press key-press)
